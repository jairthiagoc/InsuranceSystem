# Script de Setup Completo - Sistema de Seguros
Write-Host "üè¢ Setup Completo - Sistema de Seguros" -ForegroundColor Cyan
Write-Host "=====================================" -ForegroundColor Cyan

# Verificar se o Docker est√° rodando
Write-Host "üîç Verificando Docker..." -ForegroundColor Yellow
try {
    $dockerVersion = docker --version
    Write-Host "‚úÖ Docker encontrado: $dockerVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n√£o encontrado!" -ForegroundColor Red
    Write-Host "üì• Instale o Docker Desktop em: https://www.docker.com/products/docker-desktop/" -ForegroundColor Yellow
    exit 1
}

# Verificar se o Docker Compose est√° dispon√≠vel
Write-Host "üîç Verificando Docker Compose..." -ForegroundColor Yellow
try {
    $composeVersion = docker-compose --version
    Write-Host "‚úÖ Docker Compose encontrado: $composeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker Compose n√£o encontrado!" -ForegroundColor Red
    exit 1
}

# Verificar se o Node.js est√° instalado (para desenvolvimento)
Write-Host "üîç Verificando Node.js..." -ForegroundColor Yellow
try {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js encontrado: $nodeVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  Node.js n√£o encontrado (opcional para desenvolvimento)" -ForegroundColor Yellow
}

# Parar containers existentes
Write-Host "üõë Parando containers existentes..." -ForegroundColor Yellow
docker-compose down -v

# Build e executar todos os servi√ßos
Write-Host "üöÄ Iniciando todos os servi√ßos..." -ForegroundColor Yellow
docker-compose up -d --build

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Servi√ßos iniciados com sucesso!" -ForegroundColor Green
} else {
    Write-Host "‚ùå Erro ao iniciar servi√ßos" -ForegroundColor Red
    exit 1
}

# Aguardar servi√ßos ficarem prontos
Write-Host "‚è≥ Aguardando servi√ßos ficarem prontos..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# Verificar status dos servi√ßos
Write-Host "üîç Verificando status dos servi√ßos..." -ForegroundColor Yellow
docker-compose ps

# Testar APIs
Write-Host "üß™ Testando APIs..." -ForegroundColor Yellow

# Testar ProposalService
try {
    $response = Invoke-WebRequest -Uri "http://localhost:7001/api/proposals" -Method GET -TimeoutSec 10
    Write-Host "‚úÖ ProposalService est√° respondendo" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  ProposalService n√£o est√° respondendo ainda" -ForegroundColor Yellow
}

# Testar ContractService
try {
    $response = Invoke-WebRequest -Uri "http://localhost:7002/api/contracts" -Method GET -TimeoutSec 10
    Write-Host "‚úÖ ContractService est√° respondendo" -ForegroundColor Green
} catch {
    Write-Host "‚ö†Ô∏è  ContractService n√£o est√° respondendo ainda" -ForegroundColor Yellow
}

# Setup do Frontend (se Node.js estiver dispon√≠vel)
try {
    $nodeVersion = node --version
    Write-Host "üé® Configurando Frontend..." -ForegroundColor Yellow
    
    # Verificar se o diret√≥rio frontend existe
    if (Test-Path "frontend") {
        Set-Location frontend
        
        # Instalar depend√™ncias
        Write-Host "üì¶ Instalando depend√™ncias do frontend..." -ForegroundColor Yellow
        npm install
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Depend√™ncias do frontend instaladas!" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  Erro ao instalar depend√™ncias do frontend" -ForegroundColor Yellow
        }
        
        Set-Location ..
    } else {
        Write-Host "‚ö†Ô∏è  Diret√≥rio frontend n√£o encontrado" -ForegroundColor Yellow
    }
} catch {
    Write-Host "‚ö†Ô∏è  Node.js n√£o dispon√≠vel para setup do frontend" -ForegroundColor Yellow
}

Write-Host "`nüéâ Setup completo finalizado!" -ForegroundColor Green
Write-Host "`nüåê URLs dos Servi√ßos:" -ForegroundColor Cyan
Write-Host "   Frontend: http://localhost:3000" -ForegroundColor White
Write-Host "   ProposalService: http://localhost:7001" -ForegroundColor White
Write-Host "   ContractService: http://localhost:7002" -ForegroundColor White
Write-Host "   RabbitMQ UI: http://localhost:15672" -ForegroundColor White
Write-Host "   SQL Server: localhost:1433" -ForegroundColor White
Write-Host "   PostgreSQL: localhost:5432" -ForegroundColor White
Write-Host "   Redis: localhost:6379" -ForegroundColor White

Write-Host "`nüîß Comandos √öteis:" -ForegroundColor Cyan
Write-Host "   Ver logs: docker-compose logs -f" -ForegroundColor White
Write-Host "   Parar servi√ßos: docker-compose down" -ForegroundColor White
Write-Host "   Reiniciar: docker-compose restart" -ForegroundColor White
Write-Host "   Status: docker-compose ps" -ForegroundColor White

Write-Host "`nüìö Documenta√ß√£o:" -ForegroundColor Cyan
Write-Host "   README.md - Documenta√ß√£o principal" -ForegroundColor White
Write-Host "   docs/ - Documenta√ß√£o detalhada" -ForegroundColor White
Write-Host "   frontend/README.md - Documenta√ß√£o do frontend" -ForegroundColor White

Write-Host "`nüöÄ Para desenvolvimento local do frontend:" -ForegroundColor Cyan
Write-Host "   cd frontend" -ForegroundColor White
Write-Host "   npm start" -ForegroundColor White

Write-Host "`n‚úÖ Sistema pronto para uso!" -ForegroundColor Green 