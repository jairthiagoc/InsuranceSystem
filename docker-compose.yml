services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrong@Passw0rd
    ports:
      - "1433:1433"
    volumes:
      - sqlserver_data:/var/opt/mssql
    networks:
      - insurance-network

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=insurance_contracts
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - insurance-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - insurance-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI port
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - insurance-network

  proposalservice:
    build:
      context: .
      dockerfile: docker/Dockerfile.ProposalService
    ports:
      - "7001:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=InsuranceProposals;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true;
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=admin
      - RabbitMQ__Password=admin123
      - RabbitMQ__VirtualHost=/
    depends_on:
      sqlserver:
        condition: service_started
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - insurance-network

  contractservice:
    build:
      context: .
      dockerfile: docker/Dockerfile.ContractService
    ports:
      - "7002:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=insurance_contracts;Username=postgres;Password=postgres123;
      - ProposalService__BaseUrl=http://proposalservice:8080
      - Redis__ConnectionString=redis:6379
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=admin
      - RabbitMQ__Password=admin123
      - RabbitMQ__VirtualHost=/
    depends_on:
      postgres:
        condition: service_healthy
      proposalservice:
        condition: service_started
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - insurance-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=http://localhost:7001
      - REACT_APP_CONTRACT_API_URL=http://localhost:7002
      - REACT_APP_WS_URL=http://localhost:7001
      - NODE_ENV=production
    depends_on:
      proposalservice:
        condition: service_started
      contractservice:
        condition: service_started
    networks:
      - insurance-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

volumes:
  sqlserver_data:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  insurance-network:
    driver: bridge
    name: insurance-system-network 